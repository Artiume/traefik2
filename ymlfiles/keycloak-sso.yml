version: "3.7"

networks:
  traefik_proxy:
    external:
      name: traefik_proxy
  postgres_db:
#    name: postgres_db

services:
  traefik:
    image: traefik:v2.0.0-rc4
    container_name: traefik
#    command: 
    environment:
      TZ: ${TZ}
#      CLOUDFLARE_EMAIL: ${EMAIL}
#      CLOUDFLARE_API_KEY: ${CFKEY}
      GODADDY_API_SECRET: ${GODADDYSECRET}
      GODADDY_API_KEY: ${GODADDYKEY}
      PUID: ${PUID}
      GUID: ${PGID}
    dns:
      - 192.168.1.1
#      - 1.1.1.1
    ports:
      - target: 80
        published: 4480
      - target: 443
        published: 4443
      - target: 8080
        published: 8079
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${USERDIR}/traefik:/etc/traefik
    networks:
      traefik_proxy:
        ipv4_address: 10.0.0.2
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      ## HTTPS entrypoint
      traefik.http.routers.traefik.entrypoints: https
      traefik.http.routers.traefik.rule: Host(`traefik.$DOMAINNAME`)
      traefik.http.routers.traefik.tls.certresolver: godaddy
      ## Middlewares - Unique
      traefik.http.routers.traefik.middlewares: traefik-headers
      traefik.http.middlewares.traefik-headers.headers.SSLHost: traefik.$DOMAINNAME
      ## Middlewares - Chain
      traefik.http.routers.traefik.middlewares: secure-headers@file
      ## Services
      traefik.http.routers.traefik.service: traefik
      traefik.http.routers.traefik.service: api@internal
      traefik.http.services.traefik.loadbalancer.server.port: 8080
    restart: always

# The auth gate for SSO
# https://geek-cookbook.funkypenguin.co.nz/ha-docker-swarm/traefik-forward-auth/
  oauth:
# thomseddeon's image doesnt support OIDC_ISSUER yet
#    image: thomseddon/traefik-forward-auth
    image: funkypenguin/traefik-forward-auth
    container_name: oauth
    networks:
      traefik_proxy:
        ipv4_address: 10.0.0.3
    dns:
      - 192.168.1.1
    environment:
      CLIENT_ID: $AUTHCLIENTID
      CLIENT_SECRET: $AUTHCLIENTSECRET
# This is based on using the Master realm. Create a new client, this will go into your CLIENT_ID, CLIENT_SECRET details.
      OIDC_ISSUER: https://keycloak.$DOMAINNAME/auth/realms/master
      SECRET: $THISISASECRET
      AUTH_HOST: oauth.$DOMAINNAME
      COOKIE_DOMAINS: $DOMAINNAME
# https://github.com/thomseddon/traefik-forward-auth#user-restriction
#      WHITELIST: ${EMAIL}
      COOKIE_SECURE: "true"
      LIFETIME: "2592000" 
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      ## HTTPS entrypoint
      traefik.http.routers.oauth.entrypoints: https
      traefik.http.routers.oauth.rule: Host(`oauth.$DOMAINNAME`)
      traefik.http.routers.oauth.tls.certresolver: godaddy
      ## Middlewares - Unique
      traefik.http.routers.oauth.middlewares: oauth-headers
      traefik.http.middlewares.oauth-headers.headers.SSLHost: oauth.$DOMAINNAME
      ## Middlewares - Chain
      traefik.http.routers.oauth.middlewares: secure-chain@file
      ## Services
      traefik.http.routers.oauth.service: oauth
      traefik.http.services.oauth.loadbalacer.server.port: 4181
    restart: always
    depends_on:
      - keycloak2

# https://www.keycloak.org/documentation.html
# https://www.keycloak.org/docs/latest/getting_started/index.html
# https://hub.docker.com/r/jboss/keycloak/
# https://geek-cookbook.funkypenguin.co.nz/recipes/keycloak/
  keycloak2:
    image: jboss/keycloak
    container_name: keycloak2
    domainname: ${DOMAINNAME}
    ports:
      - "8078:8080"
    networks:
      traefik_proxy:
        ipv4_address: 10.0.0.4
      postgres_db:
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment:
      PUID: ${PUID}
      GUID: ${PGID}
# https://geek-cookbook.funkypenguin.co.nz/recipes/keycloak/setup-oidc-provider/
      KEYCLOAK_USER: $KEYCLOAKUSER
      KEYCLOAK_PASSWORD: $KEYCLOAKPASS
      DB_VENDOR: postgres
      DB_DATABASE: keycloak
      DB_ADDR: keycloak-db
      DB_USER: keycloak
      DB_PASSWORD: myuberpassword
# This is required to run keycloak behind traefik
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_HOSTNAME: keycloak.${DOMAINNAME}
# Tell Postgress what user/password to create
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: myuberpassword
    labels:
      traefik.enable: true
      traefik.docker.network: traefik_proxy
      ## HTTPS entrypoint
      traefik.http.routers.keycloak.entrypoints: https
      traefik.http.routers.keycloak.rule: Host(`keycloak.$DOMAINNAME`)
      traefik.http.routers.keycloak.tls.certresolver: godaddy
      ## Middlewares - Unique
      traefik.http.routers.keycloak.middlewares: keycloak-headers
      traefik.http.middlewares.keycloak-headers.headers.SSLHost: keycloak.$DOMAINNAME
      ## Middlewares - Chain
      traefik.http.routers.keycloak.middlewares: secure-chain@file
      ## Services
      traefik.http.routers.keycloak.service: keycloak
      traefik.http.services.keycloak.loadbalacer.server.port: 8080
# I tried placing keycloak behind the auth wall and using the internal DNS for the OIDC_ISSUER, it had issues so I removed it. 
    restart: always
    depends_on:
      - keycloak-db2
      - traefik

# https://hub.docker.com/_/postgres
  keycloak-db2:
    image: postgres
    container_name: keycloak-db2
    networks:
      postgres_db:
    volumes:
      - ${USERDIR}/keycloak/database:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro    
    environment:
      - DB_VENDOR=postgres
      - DB_DATABASE=keycloak
      - DB_ADDR=keycloak-db
      - DB_USER=keycloak
      - DB_PASSWORD=myuberpassword
# This is required to run keycloak behind traefik
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_HOSTNAME=keycloak.${DOMAINNAME}
# Tell Postgress what user/password to create
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=myuberpassword
    restart: always

  keycloak-db-backup2:
    image: postgres
    container_name: keycloak-db-backup2
    networks:
      postgres_db:
    volumes:
      - ${USERDIR}/keycloak/database-dump:/dump
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PGHOST=keycloak-db
      - PGUSER=keycloak
      - PGPASSWORD=myuberpassword
      - BACKUP_NUM_KEEP=7
      - BACKUP_FREQUENCY=1d
    entrypoint: |
      bash -c 'bash -s <<EOF
      trap "break;exit" SIGHUP SIGINT SIGTERM
      sleep 2m
      while /bin/true; do
        pg_dump -Fc > /dump/dump_\`date +%d-%m-%Y"_"%H_%M_%S\`.psql
        (ls -t /dump/dump*.psql|head -n $$BACKUP_NUM_KEEP;ls /dump/dump*.psql)|sort|uniq -u|xargs rm -- {} 
        sleep $$BACKUP_FREQUENCY
      done
      EOF'
    restart: always
    depends_on:
      - keycloak-db2

#  foo:
#    image: bar
#    container_name: foo
#    networks:
#      traefik:
#    labels:
#      traefik.enable: true
#      traefik.docker.network: traefik_proxy
      ## HTTPS entrypoint
#      traefik.http.routers.keycloak.entrypoints: https
#      traefik.http.routers.keycloak.rule: Host(`keycloak.$DOMAINNAME`)
#      traefik.http.routers.keycloak.tls.certresolver: godaddy
      ## Middlewares - Unique
#      traefik.http.routers.keycloak.middlewares: keycloak-headers
#      traefik.http.middlewares.keycloak-headers.headers.SSLHost: keycloak.$DOMAINNAME
      ## Middlewares - Chain
#      traefik.http.routers.keycloak.middlewares: secure-chain@file
      ## Services
#      traefik.http.routers.keycloak.service: keycloak
#      traefik.http.services.keycloak.loadbalacer.server.port: 8080
